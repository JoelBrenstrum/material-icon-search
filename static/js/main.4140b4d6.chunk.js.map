{"version":3,"sources":["theme.ts","search/IconResult.tsx","search/SearchResult.tsx","search/searchEngine/SearchProvider.ts","search/searchEngine/searchEngines.ts","search/searchEngine/JsSearchEngine.ts","search/searchEngine/AccurateSearchEngine.ts","search/api/datamuse.ts","search/api/googledictionary.ts","search/api/api.ts","data/customSearchIndex.ts","data/iconData.ts","search/Search.tsx","search/searchEngine/useSearchProvider.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","typography","fontSize","fontFamily","join","palette","primary","main","light","dark","contrastText","secondary","overrides","useStyles","makeStyles","card","margin","cardContent","display","flexDirection","alignItems","IconResult","props","icon","classes","Card","className","CardContent","Icon","name","Typography","variant","SearchResult","results","grouped","groups","result","forEach","r","categories","c","push","group","Grid","container","Object","keys","map","g","Fragment","key","SearchEngine","icons","this","SearchProvider","searchEngine","instance","getInstance","engine","search","searchProvider","console","error","SearchEngines","JsSearchEngine","setData","data","addDocuments","JsSearch","tokenizer","stemmer","addIndex","string","AccurateSearchEngine","i","length","addText","tags","AccurateSearch","indexes","index","engines","JSSearch","getSynonym","value","requestId","a","words","fetch","res","json","body","arr","arr2","w","word","apply","options","response","message","meaning","adjective","noun","verb","pushArray","synonyms","customTags","emoji_objects","add","whatshot","wc","require","mergeIcons","array","tagsToMerge","newArray","tagsArray","categoriesArray","split","getIcons","Promise","resolve","reject","startsWith","slice","materialIcons","JSON","parse","materialIconsJson","createStyles","app","height","position","overflow","padding","overflowY","flex","header","loadingMask","zIndex","top","width","backgroundColor","opacity","justifyContent","grow","flexGrow","title","breakpoints","up","formField","borderRadius","shape","fade","common","white","marginRight","spacing","marginLeft","searchIcon","pointerEvents","selectInput","color","inputRoot","inputInput","transition","transitions","create","Search","useState","searchString","setSearch","searchTerms","setSearchTerms","loading","setLoading","synonymize","setSynonymize","setGrouped","loadingId","useRef","searchTextRef","setIcons","defaultProvider","searchProviderName","setSearchProviderName","useEffect","setProvider","getEngine","useSearchProvider","synonymizeWord","localUuid","uuid","current","API","then","finally","debounced","useCallback","debounce","searchResult","useMemo","Set","Array","from","renderTitleBar","AppBar","Toolbar","noWrap","size","FormControl","Select","select","disableUnderline","onChange","event","target","values","k","MenuItem","InputBase","e","v","placeholder","root","input","inputProps","FormControlLabel","control","Checkbox","checked","label","renderSearchResult","CircularProgress","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4140b4d6.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core';\r\n\r\nconst palette = {\r\n    primary: {\r\n        main: '#1b5e20',\r\n        light: '#4c8c4a',\r\n        dark: '#003300',\r\n        contrastText: '#ffffff',\r\n\r\n    },\r\n    secondary: {\r\n        main: '#a5d6a7',\r\n        light: '#d7ffd9',\r\n        dark: '#75a478',\r\n        contrastText: '#000000',\r\n    },\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n    typography: {\r\n        fontSize: 12,\r\n        fontFamily: ['Roboto', 'Montserrat', 'Helvetica Neue', 'sans-serif'].join(','),\r\n    },\r\n    palette,\r\n    overrides: {},\r\n});\r\n\r\nexport type Theme = typeof theme;","import React from 'react';\r\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\r\nimport { Theme, theme } from '../theme';\r\nimport { IconType } from '../data/iconData';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { CardContent, Card, Typography } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  card: {\r\n    margin: 4\r\n  },\r\n  cardContent: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  }\r\n}));\r\n\r\ninterface IconResultProps {\r\n  icon: IconType\r\n}\r\n\r\nconst IconResult: React.FC<IconResultProps> = (props: IconResultProps) => {\r\n  const { icon } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent className={classes.cardContent}>\r\n        <Icon fontSize=\"large\">{icon.name}</Icon>\r\n        <Typography variant='caption'>\r\n          {icon.name}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n\r\n  );\r\n}\r\n\r\nexport default IconResult;\r\n","import React, { useState } from \"react\";\r\nimport { ThemeProvider, makeStyles } from \"@material-ui/styles\";\r\nimport { Theme, theme } from \"../theme\";\r\nimport { TextField, Grid, Typography } from \"@material-ui/core\";\r\nimport IconResult from \"./IconResult\";\r\nimport { IconType } from \"../data/iconData\";\r\n\r\ninterface SearchResultProps {\r\n    results: Array<IconType>;\r\n    grouped: boolean;\r\n}\r\n\r\nconst group = (results: Array<IconType>): { [key: string]: Array<IconType> } => {\r\n    const result: { [key: string]: Array<IconType> } = {};\r\n    results.forEach((r) => {\r\n        r.categories.forEach((c) => {\r\n            if (!result[c]) {\r\n                result[c] = [];\r\n            }\r\n            result[c].push(r);\r\n        });\r\n    });\r\n    return result;\r\n};\r\n\r\nconst SearchResult: React.FC<SearchResultProps> = (props: SearchResultProps) => {\r\n    const { results, grouped } = props;\r\n    if (grouped) {\r\n        const groups = group(results);\r\n        return (\r\n            <Grid container>\r\n                {Object.keys(groups).map((g) => (\r\n                    <React.Fragment key={g}>\r\n                        <Grid>\r\n                            <Typography variant=\"h5\">{g}</Typography>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            {groups[g].map((r) => (\r\n                                <Grid key={r.name}>\r\n                                    <IconResult icon={r} />\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                ))}\r\n            </Grid>\r\n        );\r\n    }\r\n    return (\r\n        <Grid container>\r\n            {results.map((r) => (\r\n                <Grid key={r.name}>\r\n                    <IconResult icon={r} />\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SearchResult;\r\n","import * as JsSearch from 'js-search';\r\nimport { stemmer } from 'porter-stemmer';\r\nimport { IconType } from '../../data/iconData';\r\n\r\nexport abstract class SearchEngine {\r\n    protected icons: Array<IconType> = []\r\n    abstract search(search: string): Array<IconType>\r\n    setData(icons) {\r\n        this.icons = icons;\r\n    }\r\n}\r\n\r\nexport default class SearchProvider {\r\n    private static instance: SearchProvider;\r\n    private searchEngine: SearchEngine | null = null\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    public static getInstance(): SearchProvider {\r\n        if (!SearchProvider.instance) {\r\n            SearchProvider.instance = new SearchProvider();\r\n        }\r\n        return SearchProvider.instance;\r\n    }\r\n    public static getEngine(): SearchEngine | null {\r\n        return SearchProvider.getInstance().searchEngine;\r\n    }\r\n\r\n    static setProvider(engine: SearchEngine) {\r\n        SearchProvider.getInstance().searchEngine = engine\r\n        return this\r\n    }\r\n\r\n    static search(search: string) {\r\n        const searchProvider = SearchProvider.getInstance();\r\n        if (!searchProvider.searchEngine) {\r\n            console.error('you must provide a search engine')\r\n            return;\r\n        }\r\n        return searchProvider.searchEngine.search(search)\r\n    }\r\n}\r\n","// import { fuse } from './fuse'\r\nimport JsSearchEngine from './JsSearchEngine'\r\nimport AccurateSearchEngine from './AccurateSearchEngine'\r\n\r\n\r\nexport enum SearchEngines {\r\n    JSSearch = 'Js Search',\r\n    AccurateSearch = 'Accurate Search'\r\n}\r\nconst engines = {\r\n    [SearchEngines.JSSearch]: new JsSearchEngine(),\r\n    [SearchEngines.AccurateSearch]: new AccurateSearchEngine()\r\n}\r\nexport default engines\r\n\r\n","import * as JsSearch from 'js-search';\r\nimport { stemmer } from 'porter-stemmer';\r\nimport { SearchEngine } from './SearchProvider';\r\nimport { IconType } from '../../data/iconData';\r\n\r\nexport default class JsSearchEngine extends SearchEngine {\r\n    private searchProvider: JsSearch.Search\r\n\r\n    public constructor() {\r\n        super()\r\n        this.searchProvider = new JsSearch.Search('name');\r\n        this.searchProvider.tokenizer =\r\n            new JsSearch.StemmingTokenizer(\r\n                stemmer, // Function should accept a string param and return a string\r\n                new JsSearch.SimpleTokenizer());\r\n        // search.addIndex('categories'); //todo add a category filter \r\n        this.searchProvider.addIndex('tags')\r\n        this.searchProvider.addIndex('categories')\r\n    }\r\n    search(string: any) {\r\n        return this.searchProvider.search(string) as Array<IconType>\r\n    };\r\n\r\n    public setData = (data) => {\r\n        super.setData(data);\r\n        this.searchProvider.addDocuments(data);\r\n    }\r\n}\r\n","import AccurateSearch from 'accurate-search';\r\n\r\nimport { SearchEngine } from './SearchProvider';\r\nimport { IconType } from '../../data/iconData';\r\n\r\n\r\nexport default class AccurateSearchEngine extends SearchEngine {\r\n    private searchProvider: AccurateSearch\r\n\r\n    public constructor() {\r\n        super();\r\n        this.searchProvider = new AccurateSearch();\r\n    }\r\n    public search(search: string) {\r\n        const indexes = this.searchProvider.search(search) as Array<number>\r\n        const result: Array<IconType> = [];\r\n        for (let index of indexes) result.push(this.icons[index])\r\n        return result;\r\n    };\r\n\r\n    public setData = (data) => {\r\n        super.setData(data);\r\n        //Add data\r\n        for (let i = 0; i < data.length; i++) {\r\n            const icon = data[i];\r\n            this.searchProvider.addText(i, `${icon.name} ${icon.tags.join(' ')} ${icon.categories.join(' ')}`)\r\n            // for (let j = 0; j < icon.tags.length; j++) {\r\n            //     this.searchProvider.addText(i, icon.tags[j])\r\n            // }\r\n        }\r\n    }\r\n}\r\n","import { APIInterface, ISynonymResult } from \"./api\";\r\n\r\nfunction pushArray(arr, arr2) {\r\n    arr.push.apply(arr, arr2);\r\n}\r\n\r\n\r\ninterface IResult extends Array<{ word: string, score: number }> { }\r\n\r\nclass Datamuse implements APIInterface {\r\n    public getSynonym = async (value: string, requestId: string): Promise<ISynonymResult> => {\r\n        const result: ISynonymResult = { words: [value], requestId: requestId };\r\n        const res = await fetch(`https://api.datamuse.com/words?rel_syn=${value}&max=10`);\r\n        let body: IResult = await res.json();\r\n        if (body.length > 0) {\r\n            pushArray(result.words, body.map(w => w.word));\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default new Datamuse();","import { APIInterface, ISynonymResult, IOptions, pushArray } from \"./api\";\r\n\r\n\r\ninterface ISubResult {\r\n    definition: string,\r\n    example: string,\r\n    synonyms: Array<string>\r\n}\r\n\r\ninterface IResult {\r\n    meaning: {\r\n        adjective: Array<ISubResult>\r\n        verb: Array<ISubResult>\r\n        noun: Array<ISubResult>\r\n    }\r\n}\r\ninterface IError {\r\n    message: string\r\n}\r\n\r\ninterface IResponse extends Array<IResult> { }\r\n\r\nclass GoogleDictionary implements APIInterface {\r\n    public getSynonym = async (value: string, requestId: string, options?: IOptions): Promise<ISynonymResult> => {\r\n        const result: ISynonymResult = { words: [value], requestId: requestId };\r\n        const res = await fetch(`https://api.dictionaryapi.dev/api/v1/entries/en/${value}`);\r\n        const response = <IResponse | IError>await res.json();\r\n        if ((response as IError).message) {\r\n            return result;\r\n        }\r\n        (response as IResponse).forEach(r => {\r\n            let { meaning: { adjective = [], noun = [], verb = [] } } = r;\r\n            if (!options) {\r\n                return result;\r\n            }\r\n            if (options.noun) {\r\n                noun.forEach(w => {\r\n                    pushArray(result.words, w.synonyms)\r\n                })\r\n            }\r\n            if (options.adjective) {\r\n                adjective.forEach(w => {\r\n                    pushArray(result.words, w.synonyms)\r\n                })\r\n            }\r\n            if (options.verb) {\r\n                verb.forEach(w => {\r\n                    pushArray(result.words, w.synonyms)\r\n                })\r\n            }\r\n        })\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default new GoogleDictionary();\r\n","import datamuse from './datamuse';\r\nimport googledictionary from './googledictionary';\r\n\r\nexport interface ISynonymResult {\r\n    words: Array<string>,\r\n    requestId: string\r\n}\r\n\r\nexport interface IOptions {\r\n    verb: boolean,\r\n    noun: boolean,\r\n    adjective: boolean\r\n}\r\n\r\nexport interface APIInterface {\r\n    getSynonym: (value: string, requestId: string, options?: IOptions) => Promise<ISynonymResult>\r\n}\r\nexport function pushArray(arr, arr2) {\r\n    arr.push.apply(arr, arr2);\r\n}\r\n\r\nexport { datamuse, googledictionary }","\r\nexport type Tag = {\r\n    categories?: Array<string>\r\n    tags?: Array<string>\r\n}\r\n\r\nexport const customTags: { [index: string]: Tag } = {\r\n    emoji_objects: {\r\n        categories: [],\r\n        tags: [\r\n            \"light\",\r\n            \"bulb\"\r\n        ]\r\n    },\r\n    add: {\r\n        categories: [],\r\n        tags: [\r\n            \"more\"\r\n        ]\r\n    },\r\n    whatshot: {\r\n        categories: [],\r\n        tags: [\r\n            \"lit\",\r\n            \"flame\"\r\n        ]\r\n    },\r\n\r\n    wc: {\r\n        categories: [],\r\n        tags: [\r\n            \"toilet\"\r\n        ]\r\n    },\r\n\r\n};\r\n\r\n","//merges in with the default search tags\r\n\r\nimport materialIconsJson from './materialIcons.json'\r\nimport { customTags } from './customSearchIndex'\r\nconst request = require('request');\r\n\r\nexport type IconType = {\r\n    name: string,\r\n    version: number,\r\n    unsupported_families: Array<string>,\r\n    categories: Array<string>\r\n    tags: Array<string>\r\n}\r\n\r\nfunction mergeIcons(array: Array<IconType>, tagsToMerge: typeof customTags) {\r\n    const newArray: any = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        const key = array[i]['name']\r\n        const tagsArray = tagsToMerge[key] ? tagsToMerge[key].tags || [] : [];\r\n        const categoriesArray = tagsToMerge[key] ? tagsToMerge[key].categories || [] : [];\r\n\r\n        newArray.push({\r\n            ...array[i],\r\n            tags: [...array[i].tags, ...tagsArray, ...array[i].name.split('_')],\r\n            categories: [...array[i].categories, ...categoriesArray]\r\n        } as IconType);\r\n    }\r\n    return newArray as Array<IconType>\r\n}\r\n\r\nconst URL = 'https://fonts.google.com/metadata/icons';\r\n\r\n// read icons from google, dump into json file\r\n\r\n\r\nexport const getIcons = async () => {\r\n    return new Promise<Array<IconType>>(async (resolve, reject) => {\r\n        let materialIcons;\r\n        try {\r\n            const response = await fetch(URL)\r\n            //, {\r\n            // method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n            // mode: 'no-cors', // no-cors, *cors, same-origin\r\n            // credentials: 'same-origin', // include, *same-origin, omit\r\n            // headers: {\r\n            //   'Content-Type': 'application/json'\r\n            //   // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            // },\r\n            // redirect: 'follow', // manual, *follow, error\r\n            // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n            // body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n            //});\r\n            // }\r\n            // request(URL, { json: true }, (err, res, body) => {\r\n            // if (err) { return console.log(err); }\r\n            let body = await response.json()\r\n            if (body.startsWith(')]}\\'')) body = body.slice(4);\r\n            materialIcons = JSON.parse(body)\r\n        } catch (ex) {\r\n            materialIcons = materialIconsJson\r\n        }\r\n        resolve(mergeIcons(materialIcons, customTags));\r\n    });\r\n}\r\n","import React, { useState, useEffect, useCallback, useMemo, useRef } from \"react\";\r\nimport { ThemeProvider, makeStyles, createStyles } from \"@material-ui/styles\";\r\nimport { Theme, theme } from \"../theme\";\r\nimport {\r\n    TextField,\r\n    AppBar,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    InputBase,\r\n    Icon,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    CircularProgress,\r\n    FormHelperText,\r\n    Select,\r\n    FormControl,\r\n    MenuItem,\r\n    InputLabel,\r\n} from \"@material-ui/core\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport SearchResult from \"./SearchResult\";\r\nimport Engines, { SearchEngines } from \"./searchEngine/searchEngines\";\r\nimport { googledictionary as API } from \"./api/api\";\r\nimport { fade } from \"@material-ui/core/styles\";\r\nimport { getIcons, IconType } from \"../data/iconData\";\r\nimport debounce from \"debounce\";\r\nimport uuid from \"uuid/v4\";\r\nimport SearchProvider, { SearchEngine } from \"./searchEngine/SearchProvider\";\r\nimport { useSearchProvider } from \"./searchEngine/useSearchProvider\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        app: {\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            height: \"100%\",\r\n            position: \"relative\",\r\n            overflow: \"hidden\",\r\n        },\r\n        body: {\r\n            padding: 10,\r\n            overflowY: \"scroll\",\r\n            flex: 1,\r\n        },\r\n        header: {\r\n            flex: 0,\r\n        },\r\n        loadingMask: {\r\n            zIndex: 1,\r\n            padding: 0,\r\n            top: 64,\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            backgroundColor: \"white\",\r\n            display: \"flex\",\r\n            opacity: 0.8,\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            position: \"absolute\",\r\n        },\r\n        grow: {\r\n            flexGrow: 1,\r\n            display: \"flex\",\r\n            height: 32,\r\n        },\r\n        title: {\r\n            display: \"none\",\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                display: \"block\",\r\n            },\r\n        },\r\n        formField: {\r\n            position: \"relative\",\r\n            borderRadius: theme.shape.borderRadius,\r\n            backgroundColor: fade(theme.palette.common.white, 0.15),\r\n            \"&:hover\": {\r\n                backgroundColor: fade(theme.palette.common.white, 0.25),\r\n            },\r\n            marginRight: theme.spacing(2),\r\n            marginLeft: 0,\r\n            width: \"100%\",\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                marginLeft: theme.spacing(3),\r\n                width: \"auto\",\r\n            },\r\n        },\r\n        searchIcon: {\r\n            width: theme.spacing(7),\r\n            height: \"100%\",\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n        },\r\n        selectInput: {\r\n            color: \"#fff\",\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n        inputRoot: {\r\n            color: \"inherit\",\r\n        },\r\n        inputInput: {\r\n            padding: theme.spacing(1, 1, 1, 7),\r\n            transition: theme.transitions.create(\"width\"),\r\n            width: \"100%\",\r\n            [theme.breakpoints.up(\"md\")]: {\r\n                width: 200,\r\n            },\r\n        },\r\n    })\r\n);\r\n\r\nconst Search: React.FC = () => {\r\n    const classes = useStyles();\r\n    const [searchString, setSearch] = useState(\"\");\r\n    const [searchTerms, setSearchTerms] = useState([\"\"]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [synonymize, setSynonymize] = useState(true);\r\n    const [grouped, setGrouped] = useState(true);\r\n    const loadingId = useRef<string>();\r\n    const searchTextRef = useRef<string>(\"\");\r\n\r\n    const [icons, setIcons] = useState<Array<IconType>>([]);\r\n    const [search, searchProviderName, setSearchProviderName] = useSearchProvider(icons);\r\n\r\n    //should make this a hook\r\n    const synonymizeWord = (value: string) => {\r\n        if (!value) {\r\n            setSearchTerms([value]);\r\n            return;\r\n        }\r\n        const localUuid = uuid();\r\n        loadingId.current = localUuid;\r\n        setLoading(true);\r\n        API.getSynonym(value, localUuid, { noun: true, adjective: true, verb: true })\r\n            .then((res) => {\r\n                if (loadingId.current != localUuid) {\r\n                    return;\r\n                }\r\n                setSearchTerms(res.words);\r\n            })\r\n            .finally(() => {\r\n                if (loadingId.current == localUuid) {\r\n                    setLoading(false);\r\n                }\r\n            });\r\n    };\r\n\r\n    const updateSearch = (v: string) => {\r\n        setSearch(v);\r\n        searchTextRef.current = v;\r\n    };\r\n    const debounced = useCallback(\r\n        debounce(async () => {\r\n            if (synonymize) {\r\n                synonymizeWord(searchTextRef.current);\r\n            } else {\r\n                setSearchTerms([searchTextRef.current]);\r\n            }\r\n        }, 300),\r\n        [synonymize]\r\n    );\r\n\r\n    useEffect(() => {\r\n        debounced();\r\n    }, [debounced, searchString, synonymize, searchProviderName]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            setIcons(await getIcons());\r\n            setLoading(false);\r\n        })();\r\n    }, []);\r\n\r\n    const searchResult = useMemo<Set<IconType>>(() => {\r\n        let searchResult: Set<IconType> = new Set<IconType>();\r\n        if (!searchTerms || searchTerms.length < 1 || (searchTerms.length == 1 && !searchTerms[0])) {\r\n            searchResult = new Set<IconType>(icons);\r\n        } else {\r\n            for (var i = 0, length = searchTerms.length; i < length; i++) {\r\n                searchResult = new Set<IconType>([...Array.from(searchResult), ...(search(searchTerms[i]) || [])]);\r\n            }\r\n        }\r\n        return searchResult;\r\n    }, [icons, search, searchTerms]);\r\n\r\n    const renderTitleBar = useMemo(\r\n        () => (\r\n            <AppBar position=\"static\" className={classes.header}>\r\n                <Toolbar>\r\n                    <div className={classes.grow}>\r\n                        <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                            material-icon-search (total-icons: {searchResult.size})\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.grow}>\r\n                        <FormControl className={classes.formField}>\r\n                            <Select\r\n                                classes={{\r\n                                    select: classes.selectInput,\r\n                                }}\r\n                                disableUnderline\r\n                                value={searchProviderName}\r\n                                onChange={(event) => {\r\n                                    setSearchProviderName(event.target.value as any);\r\n                                }}\r\n                            >\r\n                                {Object.values(SearchEngines).map((k) => (\r\n                                    <MenuItem value={k}>{k}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <div className={classes.formField}>\r\n                            <div className={classes.searchIcon}>\r\n                                <Icon>search</Icon>\r\n                            </div>\r\n                            <InputBase\r\n                                onChange={(e) => updateSearch(e.target.value)}\r\n                                placeholder=\"Search…\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                inputProps={{ \"aria-label\": \"search\" }}\r\n                            />\r\n                        </div>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={synonymize}\r\n                                    onChange={() => {\r\n                                        setSynonymize(!synonymize);\r\n                                    }}\r\n                                />\r\n                            }\r\n                            label=\"Synonymize\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={grouped}\r\n                                    onChange={() => {\r\n                                        setGrouped(!grouped);\r\n                                    }}\r\n                                />\r\n                            }\r\n                            label=\"Group\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={classes.grow} />\r\n                </Toolbar>\r\n            </AppBar>\r\n        ),\r\n        [\r\n            classes.header,\r\n            classes.grow,\r\n            classes.title,\r\n            classes.formField,\r\n            classes.selectInput,\r\n            classes.searchIcon,\r\n            classes.inputRoot,\r\n            classes.inputInput,\r\n            searchResult.size,\r\n            searchProviderName,\r\n            synonymize,\r\n            grouped,\r\n            setSearchProviderName,\r\n        ]\r\n    );\r\n    const renderSearchResult = useMemo(() => <SearchResult grouped={grouped} results={Array.from(searchResult)} />, [\r\n        grouped,\r\n        searchResult,\r\n    ]);\r\n    return (\r\n        <div className={classes.app}>\r\n            {renderTitleBar}\r\n            <div className={classes.body}>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    {searchTerms.join(\", \")}\r\n                </Typography>\r\n                {renderSearchResult}\r\n            </div>\r\n            {loading && (\r\n                <div className={classes.loadingMask}>\r\n                    <CircularProgress />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import { useState, useRef, useEffect } from \"react\";\r\nimport engines, { SearchEngines } from \"./searchEngines\";\r\nimport SearchProvider from \"./SearchProvider\";\r\n\r\n\r\n\r\nexport const useSearchProvider = (icons, defaultProvider?) => {\r\n    const [searchProviderName, setSearchProviderName] = useState<SearchEngines>(defaultProvider || SearchEngines.AccurateSearch);\r\n\r\n    useEffect(() => {\r\n        SearchProvider.setProvider(engines[searchProviderName]);\r\n    }, [searchProviderName]);\r\n\r\n    useEffect(() => {\r\n        const engine = SearchProvider.getEngine();\r\n        if (engine) {\r\n            engine.setData(icons);\r\n        }\r\n    }, [icons, searchProviderName]);\r\n\r\n\r\n\r\n    return [SearchProvider.search, searchProviderName, setSearchProviderName] as const\r\n}","import React from 'react';\r\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\r\nimport { Theme, theme } from './theme';\r\nimport Search from './search/Search';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    // background: theme.palette.secondary.main,\r\n    fontSize: 16,\r\n    // color: 'white',\r\n    height: '100%',\r\n  },\r\n}));\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className={classes.root}>\r\n        <Search />\r\n      </div>\r\n    </ThemeProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { theme } from './theme';\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(<ThemeProvider theme={theme}><App /></ ThemeProvider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}