{"version":3,"sources":["theme.ts","search/IconResult.tsx","search/SearchResult.tsx","data/iconData.ts","data/customSearchIndex.ts","search/searchEngine/fuse.ts","search/searchEngine/js-search.ts","search/Search.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","typography","fontSize","fontFamily","join","palette","primary","main","light","dark","contrastText","secondary","overrides","useStyles","makeStyles","card","margin","cardContent","display","flexDirection","alignItems","IconResult","props","icon","classes","Card","className","CardContent","Icon","name","Typography","variant","root","SearchResult","groups","results","result","forEach","r","categories","c","push","group","Grid","container","Object","keys","map","g","Fragment","key","icons","array","tagsToMerge","newArray","i","length","tagsArray","tags","categoriesArray","split","mergeIcons","add","whatshot","wc","Fuse","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","weight","jssearch","JsSearch","tokenizer","stemmer","addIndex","addDocuments","createStyles","body","padding","height","grow","flexGrow","title","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","common","white","marginRight","spacing","marginLeft","width","searchIcon","pointerEvents","justifyContent","inputRoot","color","inputInput","transition","transitions","create","Search","useState","searchString","setSearch","searchTerms","setSearchTerms","loading","setLoading","synonymize","setSynonymize","useEffect","debounced","loadingId","synonymizeWord","value","localUuid","uuid","fetch","then","res","a","json","words","w","score","m","word","finally","debounce","v","searchResult","Set","splitSearchTerms","Array","from","AppBar","Toolbar","noWrap","InputBase","onChange","e","target","placeholder","input","inputProps","FormControlLabel","control","Checkbox","checked","label","CircularProgress","App","ThemeProvider","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04b1024c.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core';\n\nconst palette = {\n    primary: {\n        main: '#1b5e20',\n        light: '#4c8c4a',\n        dark: '#003300',\n        contrastText: '#ffffff',\n\n    },\n    secondary: {\n        main: '#a5d6a7',\n        light: '#d7ffd9',\n        dark: '#75a478',\n        contrastText: '#000000',\n    },\n};\n\nexport const theme = createMuiTheme({\n    typography: {\n        fontSize: 12,\n        fontFamily: ['Roboto', 'Montserrat', 'Helvetica Neue', 'sans-serif'].join(','),\n    },\n    palette,\n    overrides: {},\n});\n\nexport type Theme = typeof theme;\n\n","import React from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\nimport { Theme, theme } from '../theme';\nimport { IconType } from '../data/iconData';\nimport Icon from '@material-ui/core/Icon';\nimport { CardContent, Card, Typography } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  card: {\n    margin: 4\n  },\n  cardContent: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  }\n}));\n\ninterface IconResultProps {\n  icon: IconType\n}\n\nconst IconResult: React.FC<IconResultProps> = (props: IconResultProps) => {\n  const { icon } = props;\n  const classes = useStyles();\n  return (\n    <Card className={classes.card}>\n      <CardContent className={classes.cardContent}>\n        <Icon fontSize=\"large\">{icon.name}</Icon>\n        <Typography variant='caption'>\n          {icon.name}\n        </Typography>\n      </CardContent>\n    </Card>\n\n  );\n}\n\nexport default IconResult;\n","import React, { useState } from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\nimport { Theme, theme } from '../theme';\nimport { TextField, Grid, Typography } from '@material-ui/core';\nimport IconResult from './IconResult';\nimport { IconType } from '../data/iconData'\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n\n  },\n}));\n\ninterface SearchResultProps {\n  results: Array<IconType>\n}\n\nconst group = (results: Array<IconType>): { [key: string]: Array<IconType> } => {\n  const result: { [key: string]: Array<IconType> } = {};\n  results.forEach(r => {\n    r.categories.forEach(c => {\n      if (!result[c]) {\n        result[c] = [];\n      }\n      result[c].push(r);\n    })\n\n  });\n  return result;\n};\n\nconst SearchResult: React.FC<SearchResultProps> = (props: SearchResultProps) => {\n  const { results } = props;\n  const groups = group(results);\n  const classes = useStyles();\n  return (\n    <Grid container>\n      {Object.keys(groups).map(g => (\n        <React.Fragment key={g}>\n          <Grid>\n            <Typography variant='h5'>\n              {g}\n            </Typography>\n          </Grid>\n          <Grid container>\n            {groups[g].map(r => (\n              <Grid key={r.name}>\n                <IconResult icon={r}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </ React.Fragment >\n      )\n      )}\n\n\n    </Grid>\n\n  );\n}\n\nexport default SearchResult;\n","//merges in with the default search tags\nimport materialIconsJson from './materialIcons.json'\nimport { customTags } from './customSearchIndex'\nexport type IconType = {\n    name: string,\n    version: number,\n    unsupported_families: Array<string>,\n    categories: Array<string>\n    tags: Array<string>\n}\n\nfunction mergeIcons(array: Array<IconType>, tagsToMerge: typeof customTags) {\n    const newArray: any = [];\n    for (let i = 0; i < array.length; i++) {\n        const key = array[i]['name']\n        const tagsArray = tagsToMerge[key] ? tagsToMerge[key].tags || [] : [];\n        const categoriesArray = tagsToMerge[key] ? tagsToMerge[key].categories || [] : [];\n\n        newArray.push({\n            ...array[i],\n            tags: [...array[i].tags, ...tagsArray, ...array[i].name.split('_')],\n            categories: [...array[i].categories, ...categoriesArray]\n        } as IconType);\n    }\n    return newArray as Array<IconType>\n}\n\nexport const icons = mergeIcons(materialIconsJson, customTags);","\nexport type Tag = {\n    categories?: Array<string>\n    tags?: Array<string>\n}\n\nexport const customTags: { [index: string]: Tag } = {\n    add: {\n        categories: [],\n        tags: [\n            \"more\"\n        ]\n    },\n    whatshot: {\n        categories: [],\n        tags: [\n            \"lit\",\n            \"flame\"\n        ]\n    },\n\n    wc: {\n        categories: [],\n        tags: [\n            \"toilet\"\n        ]\n    },\n\n};\n\n","import { icons } from '../../data/iconData';\nimport Fuse from 'fuse.js';\n\n// search.addDocuments(icons);\n\n\nvar options = {\n    shouldSort: true,\n    threshold: 0.4,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 32,\n    minMatchCharLength: 1,\n    keys: [{\n        name: 'categories',\n        weight: 0.1\n    }, {\n        name: 'tags',\n        weight: 0.4\n    }, {\n        name: 'name',\n        weight: 0.5\n    }]\n};\nvar fuse = new Fuse(icons, options); // \"list\" is the item array\n\nexport { fuse };\n","import * as JsSearch from 'js-search';\nimport { icons } from '../../data/iconData';\nimport { stemmer } from 'porter-stemmer';\n\n\nvar jssearch = new JsSearch.Search('name');\njssearch.tokenizer =\n    new JsSearch.StemmingTokenizer(\n        stemmer, // Function should accept a string param and return a string\n        new JsSearch.SimpleTokenizer());\n// search.addIndex('categories'); //todo add a category filter \njssearch.addIndex('tags')\n\njssearch.addDocuments(icons);\n\nexport { jssearch };","import React, { useState, useEffect } from 'react';\nimport { ThemeProvider, makeStyles, createStyles } from '@material-ui/styles';\nimport { Theme, theme } from '../theme';\nimport { TextField, AppBar, Toolbar, IconButton, Typography, InputBase, Icon, Checkbox, FormControlLabel, CircularProgress } from '@material-ui/core';\nimport SearchBar from './SearchBar';\nimport SearchResult from './SearchResult';\nimport { jssearch as search } from './searchEngine/searchEngine'\nimport { fade } from '@material-ui/core/styles';\nimport { icons, IconType } from '../data/iconData';\nimport debounce from 'debounce'\nimport uuid from 'uuid/v4'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        body: {\n            padding: 10,\n            height: '100%'\n        },\n        grow: {\n            flexGrow: 1,\n        },\n        title: {\n            display: 'none',\n            [theme.breakpoints.up('sm')]: {\n                display: 'block',\n            },\n        },\n        search: {\n            position: 'relative',\n            borderRadius: theme.shape.borderRadius,\n            backgroundColor: fade(theme.palette.common.white, 0.15),\n            '&:hover': {\n                backgroundColor: fade(theme.palette.common.white, 0.25),\n            },\n            marginRight: theme.spacing(2),\n            marginLeft: 0,\n            width: '100%',\n            [theme.breakpoints.up('sm')]: {\n                marginLeft: theme.spacing(3),\n                width: 'auto',\n            },\n        },\n        searchIcon: {\n            width: theme.spacing(7),\n            height: '100%',\n            position: 'absolute',\n            pointerEvents: 'none',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        inputRoot: {\n            color: 'inherit',\n        },\n        inputInput: {\n            padding: theme.spacing(1, 1, 1, 7),\n            transition: theme.transitions.create('width'),\n            width: '100%',\n            [theme.breakpoints.up('md')]: {\n                width: 200,\n            },\n        },\n    }),\n);\nconst maximumScore = 3000;\nconst Search: React.FC = () => {\n    const classes = useStyles();\n    const [searchString, setSearch] = useState('');\n    const [searchTerms, setSearchTerms] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [synonymize, setSynonymize] = useState(true);\n\n    useEffect(() => {\n        debounced(searchString);\n    }, [synonymize]);\n    let loadingId = ''\n    const synonymizeWord = (value) => {\n        const localUuid = uuid();\n        loadingId = localUuid;\n        setLoading(true);\n        fetch(`https://api.datamuse.com/words?rel_syn=${value}&max=10`).then(async (res) => {\n            if (loadingId != localUuid) {\n                return;\n            }\n            let body: Array<{ word: string, score: number }> = await res.json();\n            if (body.length > 0) {\n                const words: typeof body = [];\n                body.forEach(w => {\n                    if (w.score <= maximumScore) words.push(w);\n                })\n                setSearchTerms(`${value}, ${words.map(m => m.word).join(', ')}`);\n            } else {\n                setSearchTerms(value)\n            }\n        }).finally(() => {\n            if (loadingId == localUuid) {\n                setLoading(false);\n            }\n        })\n    }\n    const debounced = debounce(async (v) => {\n        setSearch(v);\n        if (synonymize) {\n            synonymizeWord(v);\n        } else {\n            setSearchTerms(v)\n        }\n    }, 300);\n\n\n    let searchResult: Set<IconType> = new Set<IconType>();\n    if (!searchTerms) {\n        searchResult = new Set<IconType>(icons);\n    } else {\n        const splitSearchTerms = searchTerms.split(',');\n        for (var i = 0, length = splitSearchTerms.length; i < length; i++) {\n            searchResult = new Set<IconType>([...Array.from(searchResult), ...(search.search(splitSearchTerms[i]) as Array<IconType>)]);\n        }\n    }\n    return (\n        <>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        material-icon-search\n                    </Typography>\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <Icon>search</Icon>\n                        </div>\n                        <InputBase\n                            onChange={(e) => debounced(e.target.value)}\n                            placeholder=\"Search…\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                            inputProps={{ 'aria-label': 'search' }}\n                        />\n                    </div>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={synonymize}\n                                onChange={(value) => { setSynonymize(!synonymize) }} />\n                        }\n                        label=\"Synonymize\"\n                    />\n\n                </Toolbar>\n            </AppBar>\n            <div className={classes.body}>\n                {loading && <CircularProgress />}\n                <Typography variant=\"h6\" noWrap>\n                    {searchTerms}\n                </Typography>\n                <SearchResult results={Array.from(searchResult)}\n                />\n            </div>\n        </>\n    );\n}\n\nexport default Search;\n","import React from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\nimport { Theme, theme } from './theme';\nimport Search from './search/Search';\n\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    // background: theme.palette.secondary.main,\n    fontSize: 16,\n    // color: 'white',\n    height: '100%',\n  },\n}));\n\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <Search />\n      </div>\n    </ThemeProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { theme } from './theme';\n\n\n\n\n\nReactDOM.render(<ThemeProvider theme={theme}><App /></ ThemeProvider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}