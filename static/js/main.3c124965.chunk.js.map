{"version":3,"sources":["theme.ts","search/SearchBar.tsx","search/IconResult.tsx","search/SearchResult.tsx","data/iconData.ts","data/customSearchIndex.ts","search/searchEngine/searchEngine.ts","search/Search.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","typography","fontSize","fontFamily","join","palette","overrides","useStyles","makeStyles","root","SearchBar","props","classes","className","TextField","onChange","IconResult","icon","Icon","name","SearchResult","results","map","r","icons","array","tagsToMerge","newArray","i","length","key","tagsArray","tags","categoriesArray","categories","push","mergeIcons","add","search","JsSearch","addIndex","addDocuments","Search","useState","searchTerm","setSearchTerm","searchResult","e","target","value","background","border","borderRadius","boxShadow","color","height","padding","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yzwHAqBaA,EAAQC,YAAe,CAChCC,WAAY,CACRC,SAAU,GACVC,WAAY,CAAC,SAAU,aAAc,iBAAkB,cAAcC,KAAK,MAE9EC,QAxBY,GAyBZC,UAAW,K,gBCrBTC,EAAYC,aAAW,SAACT,GAAD,MAAmB,CAC9CU,KAAM,OAmBOC,EAZ0B,SAACC,GACxC,IAAMC,EAAUL,IAChB,OACI,yBAAKM,UAAWD,EAAQH,MACtB,kBAACK,EAAA,EAAD,CACEC,SAAUJ,EAAMI,a,QCZpBR,EAAYC,aAAW,SAACT,GAAD,MAAmB,CAC9CU,KAAM,OAiBOO,EAR+B,SAACL,GAA4B,IAClEM,EAAQN,EAARM,KACSV,IAChB,OACI,kBAACW,EAAA,EAAD,KAAOD,EAAKE,OCfZZ,EAAYC,aAAW,SAACT,GAAD,MAAmB,CAC9CU,KAAM,OA4BOW,EApBmC,SAACT,GAA8B,IACvEU,EAAYV,EAAZU,QACFT,EAAUL,IAChB,OACI,yBAAKM,UAAWD,EAAQH,MACrBY,EAAQC,KAAI,SAAAC,GAAC,OACZ,oCACCA,EAAEJ,KACH,kBAAC,EAAD,CAAYF,KAAMM,U,ilBCIrB,IAAMC,EAhBb,SAAoBC,EAAwBC,GAExC,IADA,IAAMC,EAAgB,GACbC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAK,CACnC,IAAME,EAAML,EAAMG,GAAN,KACNG,EAAYL,EAAYI,IAAOJ,EAAYI,GAAKE,MAAa,GAC7DC,EAAkBP,EAAYI,IAAOJ,EAAYI,GAAKI,YAAmB,GAE/EP,EAASQ,KAAT,KACOV,EAAMG,GADb,CAEII,KAAK,GAAD,mBAAMP,EAAMG,GAAGI,MAAf,YAAwBD,IAC5BG,WAAW,GAAD,mBAAMT,EAAMG,GAAGM,YAAf,YAA8BD,OAGhD,OAAON,EAGUS,C,MCrB+B,CAChDC,IAAK,CACDH,WAAY,GACZF,KAAM,CACF,WCNRM,EAAS,IAAIC,SAAgB,QAEjCD,EAAOE,SAAS,QAEhBF,EAAOG,aAAajB,GCApB,IAAMjB,EAAYC,aAAW,SAACT,GAAD,MAAmB,CAC9CU,KAAM,OAwBOiC,EAjBU,WACvB,IAAM9B,EAAUL,IADa,EAEOoC,mBAAS,IAFhB,mBAEtBC,EAFsB,KAEVC,EAFU,KAGzBC,EAAeR,EAAOA,OAAOM,GACjC,OACI,yBAAK/B,UAAWD,EAAQH,MACtB,kBAAC,EAAD,CACGM,SAAU,SAACgC,GAAD,OAAOF,EAAcE,EAAEC,OAAOC,UAE3C,kBAAC,EAAD,CAAc5B,QAASyB,MClBzBvC,EAAYC,aAAW,SAACT,GAAD,MAAmB,CAC9CU,KAAM,CACHyC,WAAY,OACbC,OAAQ,EACRjD,SAAU,GACVkD,aAAc,EACdC,UAAW,wCACXC,MAAO,QACPC,OAAQ,OACRC,QAAS,cAiBEC,EAZO,WACpB,IAAM7C,EAAUL,IAChB,OACE,kBAACmD,EAAA,EAAD,CAAe3D,MAAOA,GACpB,yBAAKc,UAAWD,EAAQH,MACtB,kBAAC,EAAD,SCdYkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3c124965.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core';\n\nconst palette = {\n    // primary: {\n    //   main: primary.main,\n    //   light: primary.light,\n    //   contrastText: primary.contrastText,\n    // },\n    // secondary: {\n    //   main: secondary.main,\n    //   light: secondary.light,\n    //   contrastText: secondary.contrastText,\n    // },\n    // error: {\n    //   main: error.main,\n    //   light: error.light,\n    //   contrastText: error.contrastText,\n    // },\n    // base,\n};\n\nexport const theme = createMuiTheme({\n    typography: {\n        fontSize: 12,\n        fontFamily: ['Roboto', 'Montserrat', 'Helvetica Neue', 'sans-serif'].join(','),\n    },\n    palette,\n    overrides: {},\n});\n\nexport type Theme = typeof theme;\n\n","import React, { useState } from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\nimport { Theme, theme } from '../theme';\nimport { TextField } from '@material-ui/core';\nimport { TextFieldProps } from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    \n  },\n}));\n\ntype SearchProps = {\n} & Pick<TextFieldProps, 'onChange'>\nconst SearchBar: React.FC<SearchProps> = (props: SearchProps) => {\n  const classes = useStyles();\n  return (\n      <div className={classes.root}>\n        <TextField\n          onChange={props.onChange}\n        />\n      </div>  \n\n  );\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\nimport { Theme, theme } from '../theme';\nimport { IconType } from '../data/iconData';\nimport Icon from '@material-ui/core/Icon';\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    \n  },\n}));\n\ninterface IconResultProps {\n  icon: IconType\n}\n\nconst IconResult: React.FC<IconResultProps> = (props: IconResultProps) => {\n  const {icon} = props;\n  const classes = useStyles();\n  return (\n      <Icon>{icon.name}</Icon>\n  );\n}\n\nexport default IconResult;\n","import React, { useState } from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\nimport { Theme, theme } from '../theme';\nimport { TextField } from '@material-ui/core';\nimport IconResult from './IconResult';\nimport { IconType } from '../data/iconData'\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    \n  },\n}));\n\ninterface SearchResultProps {\n  results: Array<IconType>\n}\nconst SearchResult: React.FC<SearchResultProps> = (props: SearchResultProps) => {\n  const { results } = props;\n  const classes = useStyles();\n  return (\n      <div className={classes.root}>\n        {results.map(r => (\n          <>\n          {r.name}\n          <IconResult icon={r}\n          //   onChange={setSearchTerm}\n          />\n          </>\n        ))}\n       \n        \n      </div>  \n\n  );\n}\n\nexport default SearchResult;\n","//merges in with the default search tags\nimport materialIconsJson from './materialIcons.json'\nimport { customTags } from './customSearchIndex'\nexport type IconType = {\n    name: string,\n    version: number,\n    unsupported_families: Array<string>,\n    categories: Array<string>\n    tags: Array<string>\n}\n\nfunction mergeIcons(array: Array<IconType>, tagsToMerge: typeof customTags) {\n    const newArray: any = [];\n    for (let i = 0; i < array.length; i++) {\n        const key = array[i]['name']\n        const tagsArray = tagsToMerge[key] ? tagsToMerge[key].tags || [] : [];\n        const categoriesArray = tagsToMerge[key] ? tagsToMerge[key].categories || [] : [];\n\n        newArray.push({\n            ...array[i],\n            tags: [...array[i].tags, ...tagsArray],\n            categories: [...array[i].categories, ...categoriesArray]\n        } as IconType);\n    }\n    return newArray as Array<IconType>\n}\n\nexport const icons = mergeIcons(materialIconsJson, customTags);","\nexport type Tag = {\n    categories?: Array<string>\n    tags?: Array<string>\n}\n\nexport const customTags: { [index: string]: Tag } = {\n    add: {\n        categories: [],\n        tags: [\n            \"more\"\n        ]\n    },\n\n};\n\n","import * as JsSearch from 'js-search';\nimport { icons } from '../../data/iconData';\n\n\nvar search = new JsSearch.Search('name');\n// search.addIndex('categories'); //todo add a category filter \nsearch.addIndex('tags')\n\nsearch.addDocuments(icons);\n\nexport { search };","import React, { useState } from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\nimport { Theme, theme } from '../theme';\nimport { TextField } from '@material-ui/core';\nimport SearchBar from './SearchBar';\nimport SearchResult from './SearchResult';\nimport {search} from './searchEngine/searchEngine'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    \n  },\n}));\n\ninterface SearchProps {\n  }\nconst Search: React.FC = () => {\n  const classes = useStyles();\n  const [searchTerm, setSearchTerm] = useState('');\nconst searchResult = search.search(searchTerm);\n  return (\n      <div className={classes.root}>\n        <SearchBar\n           onChange={(e) => setSearchTerm(e.target.value)}\n        />\n        <SearchResult results={searchResult as any}\n        //   onChange={setSearchTerm}\n        />\n      </div>  \n\n  );\n}\n\nexport default Search;\n","import React from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\nimport { Theme, theme } from './theme';\nimport Search from './search/Search';\n\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n     background: 'grey',\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: '100%',\n    padding: '0 30px',\n  },\n}));\n\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <Search />\n      </div>  \n    </ThemeProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}