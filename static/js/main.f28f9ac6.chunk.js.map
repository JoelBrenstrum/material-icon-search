{"version":3,"sources":["theme.ts","search/IconResult.tsx","search/SearchResult.tsx","search/searchEngine/js-search.ts","search/api/datamuse.ts","search/api/googledictionary.ts","search/api/api.ts","data/customSearchIndex.ts","data/iconData.ts","search/Search.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","typography","fontSize","fontFamily","join","palette","primary","main","light","dark","contrastText","secondary","overrides","useStyles","makeStyles","card","margin","cardContent","display","flexDirection","alignItems","IconResult","props","icon","classes","Card","className","CardContent","Icon","name","Typography","variant","root","SearchResult","groups","results","result","forEach","r","categories","c","push","group","Grid","container","Object","keys","map","g","Fragment","key","getJSSearch","icons","jssearch","JsSearch","tokenizer","stemmer","addIndex","addDocuments","getSynonym","value","requestId","a","words","fetch","res","json","body","length","arr","arr2","w","word","apply","options","meaning","adjective","noun","verb","pushArray","synonyms","customTags","emoji_objects","tags","add","whatshot","wc","require","mergeIcons","array","tagsToMerge","newArray","i","tagsArray","categoriesArray","split","getIcons","Promise","resolve","reject","response","startsWith","slice","materialIcons","JSON","parse","materialIconsJson","createStyles","padding","height","grow","flexGrow","title","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","common","white","marginRight","spacing","marginLeft","width","searchIcon","pointerEvents","justifyContent","inputRoot","color","inputInput","transition","transitions","create","Search","useState","searchString","setSearch","searchTerms","setSearchTerms","loading","setLoading","synonymize","setSynonymize","setIcons","synonymizeWord","localUuid","uuid","loadingId","API","then","finally","debounced","useCallback","debounce","v","useEffect","searchResult","Set","Array","from","AppBar","Toolbar","noWrap","InputBase","onChange","e","target","placeholder","input","inputProps","FormControlLabel","control","Checkbox","checked","label","CircularProgress","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f28f9ac6.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core';\r\n\r\nconst palette = {\r\n    primary: {\r\n        main: '#1b5e20',\r\n        light: '#4c8c4a',\r\n        dark: '#003300',\r\n        contrastText: '#ffffff',\r\n\r\n    },\r\n    secondary: {\r\n        main: '#a5d6a7',\r\n        light: '#d7ffd9',\r\n        dark: '#75a478',\r\n        contrastText: '#000000',\r\n    },\r\n};\r\n\r\nexport const theme = createMuiTheme({\r\n    typography: {\r\n        fontSize: 12,\r\n        fontFamily: ['Roboto', 'Montserrat', 'Helvetica Neue', 'sans-serif'].join(','),\r\n    },\r\n    palette,\r\n    overrides: {},\r\n});\r\n\r\nexport type Theme = typeof theme;\r\n\r\n","import React from 'react';\r\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\r\nimport { Theme, theme } from '../theme';\r\nimport { IconType } from '../data/iconData';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { CardContent, Card, Typography } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  card: {\r\n    margin: 4\r\n  },\r\n  cardContent: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  }\r\n}));\r\n\r\ninterface IconResultProps {\r\n  icon: IconType\r\n}\r\n\r\nconst IconResult: React.FC<IconResultProps> = (props: IconResultProps) => {\r\n  const { icon } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent className={classes.cardContent}>\r\n        <Icon fontSize=\"large\">{icon.name}</Icon>\r\n        <Typography variant='caption'>\r\n          {icon.name}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n\r\n  );\r\n}\r\n\r\nexport default IconResult;\r\n","import React, { useState } from 'react';\r\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\r\nimport { Theme, theme } from '../theme';\r\nimport { TextField, Grid, Typography } from '@material-ui/core';\r\nimport IconResult from './IconResult';\r\nimport { IconType } from '../data/iconData'\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n\r\n  },\r\n}));\r\n\r\ninterface SearchResultProps {\r\n  results: Array<IconType>\r\n}\r\n\r\nconst group = (results: Array<IconType>): { [key: string]: Array<IconType> } => {\r\n  const result: { [key: string]: Array<IconType> } = {};\r\n  results.forEach(r => {\r\n    r.categories.forEach(c => {\r\n      if (!result[c]) {\r\n        result[c] = [];\r\n      }\r\n      result[c].push(r);\r\n    })\r\n\r\n  });\r\n  return result;\r\n};\r\n\r\nconst SearchResult: React.FC<SearchResultProps> = (props: SearchResultProps) => {\r\n  const { results } = props;\r\n  const groups = group(results);\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container>\r\n      {Object.keys(groups).map(g => (\r\n        <React.Fragment key={g}>\r\n          <Grid>\r\n            <Typography variant='h5'>\r\n              {g}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid container>\r\n            {groups[g].map(r => (\r\n              <Grid key={r.name}>\r\n                <IconResult icon={r}\r\n                />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </ React.Fragment >\r\n      )\r\n      )}\r\n\r\n\r\n    </Grid>\r\n\r\n  );\r\n}\r\n\r\nexport default SearchResult;\r\n","import * as JsSearch from 'js-search';\r\nimport { stemmer } from 'porter-stemmer';\r\n\r\n\r\nexport const getJSSearch = (icons) => {\r\n    var jssearch = new JsSearch.Search('name');\r\n    jssearch.tokenizer =\r\n        new JsSearch.StemmingTokenizer(\r\n            stemmer, // Function should accept a string param and return a string\r\n            new JsSearch.SimpleTokenizer());\r\n    // search.addIndex('categories'); //todo add a category filter \r\n    jssearch.addIndex('tags')\r\n\r\n    jssearch.addDocuments(icons);\r\n\r\n    return jssearch\r\n}","import { APIInterface, ISynonymResult } from \"./api\";\r\n\r\nfunction pushArray(arr, arr2) {\r\n    arr.push.apply(arr, arr2);\r\n}\r\n\r\n\r\ninterface IResult extends Array<{ word: string, score: number }> { }\r\n\r\nclass Datamuse implements APIInterface {\r\n    public getSynonym = async (value: string, requestId: string): Promise<ISynonymResult> => {\r\n        const result: ISynonymResult = { words: [value], requestId: requestId };\r\n        const res = await fetch(`https://api.datamuse.com/words?rel_syn=${value}&max=10`);\r\n        let body: IResult = await res.json();\r\n        if (body.length > 0) {\r\n            pushArray(result.words, body.map(w => w.word));\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default new Datamuse();","import { APIInterface, ISynonymResult, IOptions, pushArray } from \"./api\";\r\n\r\n\r\ninterface ISubResult {\r\n    definition: string,\r\n    example: string,\r\n    synonyms: Array<string>\r\n}\r\n\r\ninterface IResult {\r\n    meaning: {\r\n        adjective: Array<ISubResult>\r\n        verb: Array<ISubResult>\r\n        noun: Array<ISubResult>\r\n    }\r\n}\r\n\r\ninterface IResponse extends Array<IResult> { }\r\n\r\nclass GoogleDictionary implements APIInterface {\r\n    public getSynonym = async (value: string, requestId: string, options?: IOptions): Promise<ISynonymResult> => {\r\n        const result: ISynonymResult = { words: [value], requestId: requestId };\r\n        const res = await fetch(`https://api.dictionaryapi.dev/api/v1/entries/en/${value}`);\r\n        const response = <IResponse>await res.json();\r\n        response.forEach(r => {\r\n            let { meaning: { adjective = [], noun = [], verb = [] } } = r;\r\n            if (!options) {\r\n                return result;\r\n            }\r\n            if (options.noun) {\r\n                noun.forEach(w => {\r\n                    pushArray(result.words, w.synonyms)\r\n                })\r\n            }\r\n            if (options.adjective) {\r\n                adjective.forEach(w => {\r\n                    pushArray(result.words, w.synonyms)\r\n                })\r\n            }\r\n            if (options.verb) {\r\n                verb.forEach(w => {\r\n                    pushArray(result.words, w.synonyms)\r\n                })\r\n            }\r\n        })\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default new GoogleDictionary();\r\n","import datamuse from './datamuse';\r\nimport googledictionary from './googledictionary';\r\n\r\nexport interface ISynonymResult {\r\n    words: Array<string>,\r\n    requestId: string\r\n}\r\n\r\nexport interface IOptions {\r\n    verb: boolean,\r\n    noun: boolean,\r\n    adjective: boolean\r\n}\r\n\r\nexport interface APIInterface {\r\n    getSynonym: (value: string, requestId: string, options?: IOptions) => Promise<ISynonymResult>\r\n}\r\nexport function pushArray(arr, arr2) {\r\n    arr.push.apply(arr, arr2);\r\n}\r\n\r\nexport { datamuse, googledictionary }","\r\nexport type Tag = {\r\n    categories?: Array<string>\r\n    tags?: Array<string>\r\n}\r\n\r\nexport const customTags: { [index: string]: Tag } = {\r\n    emoji_objects: {\r\n        categories: [],\r\n        tags: [\r\n            \"light\",\r\n            \"bulb\"\r\n        ]\r\n    },\r\n    add: {\r\n        categories: [],\r\n        tags: [\r\n            \"more\"\r\n        ]\r\n    },\r\n    whatshot: {\r\n        categories: [],\r\n        tags: [\r\n            \"lit\",\r\n            \"flame\"\r\n        ]\r\n    },\r\n\r\n    wc: {\r\n        categories: [],\r\n        tags: [\r\n            \"toilet\"\r\n        ]\r\n    },\r\n\r\n};\r\n\r\n","//merges in with the default search tags\r\n\r\nimport materialIconsJson from './materialIcons.json'\r\nimport { customTags } from './customSearchIndex'\r\nconst request = require('request');\r\n\r\nexport type IconType = {\r\n    name: string,\r\n    version: number,\r\n    unsupported_families: Array<string>,\r\n    categories: Array<string>\r\n    tags: Array<string>\r\n}\r\n\r\nfunction mergeIcons(array: Array<IconType>, tagsToMerge: typeof customTags) {\r\n    const newArray: any = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        const key = array[i]['name']\r\n        const tagsArray = tagsToMerge[key] ? tagsToMerge[key].tags || [] : [];\r\n        const categoriesArray = tagsToMerge[key] ? tagsToMerge[key].categories || [] : [];\r\n\r\n        newArray.push({\r\n            ...array[i],\r\n            tags: [...array[i].tags, ...tagsArray, ...array[i].name.split('_')],\r\n            categories: [...array[i].categories, ...categoriesArray]\r\n        } as IconType);\r\n    }\r\n    return newArray as Array<IconType>\r\n}\r\n\r\nconst URL = 'https://fonts.google.com/metadata/icons';\r\n\r\n// read icons from google, dump into json file\r\n\r\n\r\nexport const getIcons = async () => {\r\n    return new Promise<Array<IconType>>(async (resolve, reject) => {\r\n        const response = await fetch(URL)\r\n        //, {\r\n        // method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n        // mode: 'no-cors', // no-cors, *cors, same-origin\r\n        // credentials: 'same-origin', // include, *same-origin, omit\r\n        // headers: {\r\n        //   'Content-Type': 'application/json'\r\n        //   // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        // },\r\n        // redirect: 'follow', // manual, *follow, error\r\n        // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n        // body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n        //});\r\n        // }\r\n        // request(URL, { json: true }, (err, res, body) => {\r\n        // if (err) { return console.log(err); }\r\n        let materialIcons;\r\n        try {\r\n            let body = await response.json()\r\n            if (body.startsWith(')]}\\'')) body = body.slice(4);\r\n            materialIcons = JSON.parse(body)\r\n        } catch (ex) {\r\n            materialIcons = materialIconsJson\r\n        }\r\n        resolve(mergeIcons(materialIcons, customTags));\r\n    });\r\n}\r\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport { ThemeProvider, makeStyles, createStyles } from \"@material-ui/styles\";\r\nimport { Theme, theme } from \"../theme\";\r\nimport {\r\n    TextField,\r\n    AppBar,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    InputBase,\r\n    Icon,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport SearchResult from \"./SearchResult\";\r\nimport { getJSSearch as search } from \"./searchEngine/searchEngine\";\r\nimport { googledictionary as API } from \"./api/api\";\r\nimport { fade } from \"@material-ui/core/styles\";\r\nimport { getIcons, IconType } from \"../data/iconData\";\r\nimport debounce from \"debounce\";\r\nimport uuid from \"uuid/v4\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        body: {\r\n            padding: 10,\r\n            height: \"100%\",\r\n        },\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        title: {\r\n            display: \"none\",\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                display: \"block\",\r\n            },\r\n        },\r\n        search: {\r\n            position: \"relative\",\r\n            borderRadius: theme.shape.borderRadius,\r\n            backgroundColor: fade(theme.palette.common.white, 0.15),\r\n            \"&:hover\": {\r\n                backgroundColor: fade(theme.palette.common.white, 0.25),\r\n            },\r\n            marginRight: theme.spacing(2),\r\n            marginLeft: 0,\r\n            width: \"100%\",\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                marginLeft: theme.spacing(3),\r\n                width: \"auto\",\r\n            },\r\n        },\r\n        searchIcon: {\r\n            width: theme.spacing(7),\r\n            height: \"100%\",\r\n            position: \"absolute\",\r\n            pointerEvents: \"none\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n        },\r\n        inputRoot: {\r\n            color: \"inherit\",\r\n        },\r\n        inputInput: {\r\n            padding: theme.spacing(1, 1, 1, 7),\r\n            transition: theme.transitions.create(\"width\"),\r\n            width: \"100%\",\r\n            [theme.breakpoints.up(\"md\")]: {\r\n                width: 200,\r\n            },\r\n        },\r\n    })\r\n);\r\n\r\nconst Search: React.FC = () => {\r\n    const classes = useStyles();\r\n    const [searchString, setSearch] = useState(\"\");\r\n    const [searchTerms, setSearchTerms] = useState([\"\"]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [synonymize, setSynonymize] = useState(true);\r\n    const [icons, setIcons] = useState<Array<IconType>>([]);\r\n\r\n    const synonymizeWord = (value: string) => {\r\n        if (!value) {\r\n            setSearchTerms([value]);\r\n            return;\r\n        }\r\n        const localUuid = uuid();\r\n        loadingId = localUuid;\r\n        setLoading(true);\r\n        API.getSynonym(value, localUuid, { noun: true, adjective: true, verb: true })\r\n            .then((res) => {\r\n                if (loadingId != localUuid) {\r\n                    return;\r\n                }\r\n                setSearchTerms(res.words);\r\n            })\r\n            .finally(() => {\r\n                if (loadingId == localUuid) {\r\n                    setLoading(false);\r\n                }\r\n            });\r\n    };\r\n\r\n    const debounced = useCallback(\r\n        debounce(async (v: string) => {\r\n            setSearch(v);\r\n            if (synonymize) {\r\n                synonymizeWord(v);\r\n            } else {\r\n                setSearchTerms([v]);\r\n            }\r\n        }, 300),\r\n        [synonymize]\r\n    );\r\n    useEffect(() => {\r\n        debounced(searchString);\r\n    }, [debounced, searchString, synonymize]);\r\n    useEffect(() => {\r\n        (async () => {\r\n            setIcons(await getIcons());\r\n        })();\r\n    }, []);\r\n    let loadingId = \"\";\r\n    let searchResult: Set<IconType> = new Set<IconType>();\r\n    if (!searchTerms || searchTerms.length < 1 || (searchTerms.length == 1 && !searchTerms[0])) {\r\n        searchResult = new Set<IconType>(icons);\r\n    } else {\r\n        for (var i = 0, length = searchTerms.length; i < length; i++) {\r\n            searchResult = new Set<IconType>([\r\n                ...Array.from(searchResult),\r\n                ...(search(icons).search(searchTerms[i]) as Array<IconType>),\r\n            ]);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        material-icon-search\r\n                    </Typography>\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <Icon>search</Icon>\r\n                        </div>\r\n                        <InputBase\r\n                            onChange={(e) => debounced(e.target.value)}\r\n                            placeholder=\"Search…\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            inputProps={{ \"aria-label\": \"search\" }}\r\n                        />\r\n                    </div>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={synonymize}\r\n                                onChange={() => {\r\n                                    setSynonymize(!synonymize);\r\n                                }}\r\n                            />\r\n                        }\r\n                        label=\"Synonymize\"\r\n                    />\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className={classes.body}>\r\n                {loading && <CircularProgress />}\r\n                <Typography variant=\"h6\" noWrap>\r\n                    {searchTerms.join(\", \")}\r\n                </Typography>\r\n                <SearchResult results={Array.from(searchResult)} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport { ThemeProvider, makeStyles } from '@material-ui/styles';\r\nimport { Theme, theme } from './theme';\r\nimport Search from './search/Search';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    // background: theme.palette.secondary.main,\r\n    fontSize: 16,\r\n    // color: 'white',\r\n    height: '100%',\r\n  },\r\n}));\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className={classes.root}>\r\n        <Search />\r\n      </div>\r\n    </ThemeProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { theme } from './theme';\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(<ThemeProvider theme={theme}><App /></ ThemeProvider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}